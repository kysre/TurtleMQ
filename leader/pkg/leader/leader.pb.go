// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/leader/leader.proto

package leader

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddDataNodeRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDataNodeRequest) Reset()         { *m = AddDataNodeRequest{} }
func (m *AddDataNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddDataNodeRequest) ProtoMessage()    {}
func (*AddDataNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d681aed14ae47415, []int{0}
}

func (m *AddDataNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDataNodeRequest.Unmarshal(m, b)
}
func (m *AddDataNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDataNodeRequest.Marshal(b, m, deterministic)
}
func (m *AddDataNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDataNodeRequest.Merge(m, src)
}
func (m *AddDataNodeRequest) XXX_Size() int {
	return xxx_messageInfo_AddDataNodeRequest.Size(m)
}
func (m *AddDataNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDataNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDataNodeRequest proto.InternalMessageInfo

func (m *AddDataNodeRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*AddDataNodeRequest)(nil), "leader.AddDataNodeRequest")
}

func init() {
	proto.RegisterFile("api/leader/leader.proto", fileDescriptor_d681aed14ae47415)
}

var fileDescriptor_d681aed14ae47415 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2c, 0xc8, 0xd4,
	0xcf, 0x49, 0x4d, 0x4c, 0x49, 0x2d, 0x82, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c,
	0x10, 0x9e, 0x94, 0x74, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x58, 0x34, 0xa9, 0x34, 0x4d,
	0x3f, 0x35, 0xb7, 0xa0, 0xa4, 0x12, 0xa2, 0x48, 0x49, 0x8f, 0x4b, 0xc8, 0x31, 0x25, 0xc5, 0x25,
	0xb1, 0x24, 0xd1, 0x2f, 0x3f, 0x25, 0x35, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x82,
	0x8b, 0x3d, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08,
	0xc6, 0x35, 0xea, 0x60, 0xe4, 0x62, 0xf3, 0x01, 0x9b, 0x2b, 0x64, 0xcd, 0xc5, 0xe9, 0x59, 0xec,
	0x91, 0x9a, 0x98, 0x53, 0x92, 0x51, 0x29, 0x24, 0xa6, 0x07, 0xb1, 0x45, 0x0f, 0x66, 0x8b, 0x9e,
	0x2b, 0xc8, 0x16, 0x29, 0x1c, 0xe2, 0x42, 0x8e, 0x5c, 0xdc, 0x48, 0xf6, 0x0a, 0x49, 0xe9, 0x41,
	0x9d, 0x8e, 0xe9, 0x18, 0x5c, 0x46, 0x38, 0xe9, 0x46, 0x69, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x67, 0x57, 0x16, 0x17, 0xa5, 0xea, 0x87, 0x94, 0x16, 0x95, 0xe4,
	0xa4, 0xfa, 0x06, 0xc2, 0x02, 0xa4, 0x20, 0x3b, 0x1d, 0xca, 0x4c, 0x62, 0x03, 0x6b, 0x37, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x30, 0x27, 0xa0, 0xe1, 0x30, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LeaderClient is the client API for Leader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderClient interface {
	IsHealthy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	AddDataNode(ctx context.Context, in *AddDataNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type leaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderClient(cc grpc.ClientConnInterface) LeaderClient {
	return &leaderClient{cc}
}

func (c *leaderClient) IsHealthy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/leader.Leader/IsHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) AddDataNode(ctx context.Context, in *AddDataNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/leader.Leader/AddDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServer is the server API for Leader service.
type LeaderServer interface {
	IsHealthy(context.Context, *empty.Empty) (*empty.Empty, error)
	AddDataNode(context.Context, *AddDataNodeRequest) (*empty.Empty, error)
}

// UnimplementedLeaderServer can be embedded to have forward compatible implementations.
type UnimplementedLeaderServer struct {
}

func (*UnimplementedLeaderServer) IsHealthy(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHealthy not implemented")
}
func (*UnimplementedLeaderServer) AddDataNode(ctx context.Context, req *AddDataNodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataNode not implemented")
}

func RegisterLeaderServer(s *grpc.Server, srv LeaderServer) {
	s.RegisterService(&_Leader_serviceDesc, srv)
}

func _Leader_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).IsHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leader.Leader/IsHealthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).IsHealthy(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_AddDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).AddDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leader.Leader/AddDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).AddDataNode(ctx, req.(*AddDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Leader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leader.Leader",
	HandlerType: (*LeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsHealthy",
			Handler:    _Leader_IsHealthy_Handler,
		},
		{
			MethodName: "AddDataNode",
			Handler:    _Leader_AddDataNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/leader/leader.proto",
}
