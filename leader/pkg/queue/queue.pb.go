// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/queue/queue.proto

package queue

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                [][]byte `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19f82a9e8d3cfaf, []int{0}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PushRequest) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PullResponse struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                [][]byte `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullResponse) Reset()         { *m = PullResponse{} }
func (m *PullResponse) String() string { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()    {}
func (*PullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f19f82a9e8d3cfaf, []int{1}
}

func (m *PullResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullResponse.Unmarshal(m, b)
}
func (m *PullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullResponse.Marshal(b, m, deterministic)
}
func (m *PullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullResponse.Merge(m, src)
}
func (m *PullResponse) XXX_Size() int {
	return xxx_messageInfo_PullResponse.Size(m)
}
func (m *PullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullResponse proto.InternalMessageInfo

func (m *PullResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PullResponse) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "queue.PushRequest")
	proto.RegisterType((*PullResponse)(nil), "queue.PullResponse")
}

func init() {
	proto.RegisterFile("api/queue/queue.proto", fileDescriptor_f19f82a9e8d3cfaf)
}

var fileDescriptor_f19f82a9e8d3cfaf = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xa9, 0x75, 0x05, 0x63, 0x0f, 0x32, 0xfe, 0xa1, 0xac, 0x97, 0xd2, 0x53, 0x11, 0x49,
	0xa0, 0x45, 0x3f, 0x80, 0xe0, 0x51, 0x68, 0x83, 0x27, 0x6f, 0xbb, 0x3a, 0xa6, 0xcb, 0xce, 0x9a,
	0x6c, 0x92, 0x11, 0xf6, 0xdb, 0x4b, 0x36, 0xf8, 0xe7, 0x22, 0x78, 0x09, 0x79, 0x33, 0xf3, 0xde,
	0xfc, 0x18, 0x71, 0x51, 0xb9, 0x46, 0xf5, 0x8c, 0x8c, 0xf9, 0x95, 0xce, 0xdb, 0x68, 0xa1, 0x18,
	0x45, 0x79, 0x65, 0xac, 0x35, 0x84, 0x6a, 0x2c, 0xd6, 0xfc, 0xa6, 0xb0, 0x73, 0x71, 0xc8, 0x33,
	0xcb, 0x5b, 0x71, 0xb2, 0xe5, 0xb0, 0xd7, 0xd8, 0x33, 0x86, 0x08, 0xa7, 0x62, 0xda, 0xe2, 0x30,
	0x9f, 0x2c, 0x26, 0xab, 0x63, 0x9d, 0xbe, 0x70, 0x2e, 0x8a, 0x8f, 0x8a, 0x18, 0xe7, 0x07, 0x8b,
	0xe9, 0x6a, 0xa6, 0xb3, 0x58, 0xde, 0x89, 0xd9, 0x96, 0x89, 0x34, 0x06, 0x67, 0xdf, 0x03, 0xfe,
	0xd7, 0xb7, 0x76, 0xa2, 0xd8, 0x25, 0x28, 0x58, 0x8b, 0xc3, 0xb4, 0x17, 0x40, 0x66, 0xe2, 0x5f,
	0x10, 0xe5, 0xa5, 0xcc, 0xc4, 0xf2, 0x8b, 0x58, 0x3e, 0x24, 0x62, 0xd8, 0x24, 0x0f, 0x11, 0xfc,
	0xd1, 0x2f, 0xcf, 0xbe, 0xb3, 0x7e, 0xc8, 0xee, 0x6f, 0x9e, 0xaf, 0x4d, 0x13, 0xf7, 0x5c, 0xcb,
	0x17, 0xdb, 0xa9, 0x76, 0x08, 0x1e, 0xd5, 0x13, 0xfb, 0x48, 0xf8, 0xb8, 0x53, 0x84, 0xd5, 0x2b,
	0x7a, 0xe5, 0x5a, 0x93, 0x0f, 0x57, 0x1f, 0x8d, 0x91, 0x9b, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0xe5, 0xec, 0xe8, 0x52, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueueClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Pull(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PullResponse, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/queue.Queue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Pull(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PullResponse, error) {
	out := new(PullResponse)
	err := c.cc.Invoke(ctx, "/queue.Queue/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
type QueueServer interface {
	Push(context.Context, *PushRequest) (*empty.Empty, error)
	Pull(context.Context, *empty.Empty) (*PullResponse, error)
}

// UnimplementedQueueServer can be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (*UnimplementedQueueServer) Push(ctx context.Context, req *PushRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedQueueServer) Pull(ctx context.Context, req *empty.Empty) (*PullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterQueueServer(s *grpc.Server, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/queue.Queue/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Pull(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "queue.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Queue_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Queue_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/queue/queue.proto",
}
