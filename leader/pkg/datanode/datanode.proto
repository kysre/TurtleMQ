syntax = "proto3";

// protoc -I. --go_out=plugins=grpc:$GOPATH/src ./api/datanode/datanode.proto
// python -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. ./api/datanode.proto

package datanode;

import "google/protobuf/empty.proto";

option go_package = "github.com/kysre/TurtleMQ/leader/pkg/datanode";

message QueueMessage {
  string key = 1;
  repeated bytes value = 2;
}

message PushRequest {
  QueueMessage message = 1;
  bool is_replica = 2;
}

message PullResponse {
  QueueMessage message = 1;
}

message AcknowledgePullRequest {
  string key = 1;
  bool is_replica = 2;
}

message ReadPartitionResponse {
  repeated QueueMessage partition_messages = 1;
}

message ReadPartitionRequest {
  int32 partition_index = 1;
  bool is_replica = 2;
}

message WritePartitionRequest {
  int32 partition_index = 1;
  bool is_replica = 2;
  repeated QueueMessage partition_messages = 3;
}

message GetRemainingMessagesCountResponse {
  int32 remaining_messages_count = 1;
}

service DataNode {
  // Basic Queue Operation
  rpc Push(PushRequest) returns (google.protobuf.Empty);
  rpc Pull(google.protobuf.Empty) returns (PullResponse);
  rpc AcknowledgePull(AcknowledgePullRequest) returns (google.protobuf.Empty);
  // Data syncing Operation
  rpc ReadPartition(ReadPartitionRequest) returns (stream ReadPartitionResponse);
  rpc WritePartition(stream WritePartitionRequest) returns (google.protobuf.Empty);
  rpc PurgeReplicaData(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Cluster consensus
  rpc IsHealthy(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc GetRemainingMessagesCount(google.protobuf.Empty) returns (GetRemainingMessagesCountResponse);
}
