// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datanode.proto

package datanode

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueueMessage struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueMessage) Reset()         { *m = QueueMessage{} }
func (m *QueueMessage) String() string { return proto.CompactTextString(m) }
func (*QueueMessage) ProtoMessage()    {}
func (*QueueMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{0}
}

func (m *QueueMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueMessage.Unmarshal(m, b)
}
func (m *QueueMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueMessage.Marshal(b, m, deterministic)
}
func (m *QueueMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMessage.Merge(m, src)
}
func (m *QueueMessage) XXX_Size() int {
	return xxx_messageInfo_QueueMessage.Size(m)
}
func (m *QueueMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMessage proto.InternalMessageInfo

func (m *QueueMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueueMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PushRequest struct {
	Message              *QueueMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	IsReplica            bool          `protobuf:"varint,2,opt,name=is_replica,json=isReplica,proto3" json:"is_replica,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{1}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetMessage() *QueueMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PushRequest) GetIsReplica() bool {
	if m != nil {
		return m.IsReplica
	}
	return false
}

type PullResponse struct {
	Message              *QueueMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PullResponse) Reset()         { *m = PullResponse{} }
func (m *PullResponse) String() string { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()    {}
func (*PullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{2}
}

func (m *PullResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullResponse.Unmarshal(m, b)
}
func (m *PullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullResponse.Marshal(b, m, deterministic)
}
func (m *PullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullResponse.Merge(m, src)
}
func (m *PullResponse) XXX_Size() int {
	return xxx_messageInfo_PullResponse.Size(m)
}
func (m *PullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullResponse proto.InternalMessageInfo

func (m *PullResponse) GetMessage() *QueueMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type AcknowledgePullRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	IsReplica            bool     `protobuf:"varint,2,opt,name=is_replica,json=isReplica,proto3" json:"is_replica,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcknowledgePullRequest) Reset()         { *m = AcknowledgePullRequest{} }
func (m *AcknowledgePullRequest) String() string { return proto.CompactTextString(m) }
func (*AcknowledgePullRequest) ProtoMessage()    {}
func (*AcknowledgePullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{3}
}

func (m *AcknowledgePullRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcknowledgePullRequest.Unmarshal(m, b)
}
func (m *AcknowledgePullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcknowledgePullRequest.Marshal(b, m, deterministic)
}
func (m *AcknowledgePullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcknowledgePullRequest.Merge(m, src)
}
func (m *AcknowledgePullRequest) XXX_Size() int {
	return xxx_messageInfo_AcknowledgePullRequest.Size(m)
}
func (m *AcknowledgePullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcknowledgePullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcknowledgePullRequest proto.InternalMessageInfo

func (m *AcknowledgePullRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AcknowledgePullRequest) GetIsReplica() bool {
	if m != nil {
		return m.IsReplica
	}
	return false
}

type ReadPartitionResponse struct {
	PartitionMessages    []*QueueMessage `protobuf:"bytes,1,rep,name=partition_messages,json=partitionMessages,proto3" json:"partition_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReadPartitionResponse) Reset()         { *m = ReadPartitionResponse{} }
func (m *ReadPartitionResponse) String() string { return proto.CompactTextString(m) }
func (*ReadPartitionResponse) ProtoMessage()    {}
func (*ReadPartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{4}
}

func (m *ReadPartitionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadPartitionResponse.Unmarshal(m, b)
}
func (m *ReadPartitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadPartitionResponse.Marshal(b, m, deterministic)
}
func (m *ReadPartitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadPartitionResponse.Merge(m, src)
}
func (m *ReadPartitionResponse) XXX_Size() int {
	return xxx_messageInfo_ReadPartitionResponse.Size(m)
}
func (m *ReadPartitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadPartitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadPartitionResponse proto.InternalMessageInfo

func (m *ReadPartitionResponse) GetPartitionMessages() []*QueueMessage {
	if m != nil {
		return m.PartitionMessages
	}
	return nil
}

type ReadPartitionRequest struct {
	PartitionIndex       int32    `protobuf:"varint,1,opt,name=partition_index,json=partitionIndex,proto3" json:"partition_index,omitempty"`
	IsReplica            bool     `protobuf:"varint,2,opt,name=is_replica,json=isReplica,proto3" json:"is_replica,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadPartitionRequest) Reset()         { *m = ReadPartitionRequest{} }
func (m *ReadPartitionRequest) String() string { return proto.CompactTextString(m) }
func (*ReadPartitionRequest) ProtoMessage()    {}
func (*ReadPartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{5}
}

func (m *ReadPartitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadPartitionRequest.Unmarshal(m, b)
}
func (m *ReadPartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadPartitionRequest.Marshal(b, m, deterministic)
}
func (m *ReadPartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadPartitionRequest.Merge(m, src)
}
func (m *ReadPartitionRequest) XXX_Size() int {
	return xxx_messageInfo_ReadPartitionRequest.Size(m)
}
func (m *ReadPartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadPartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadPartitionRequest proto.InternalMessageInfo

func (m *ReadPartitionRequest) GetPartitionIndex() int32 {
	if m != nil {
		return m.PartitionIndex
	}
	return 0
}

func (m *ReadPartitionRequest) GetIsReplica() bool {
	if m != nil {
		return m.IsReplica
	}
	return false
}

type WritePartitionRequest struct {
	PartitionIndex       int32           `protobuf:"varint,1,opt,name=partition_index,json=partitionIndex,proto3" json:"partition_index,omitempty"`
	IsReplica            bool            `protobuf:"varint,2,opt,name=is_replica,json=isReplica,proto3" json:"is_replica,omitempty"`
	PartitionMessages    []*QueueMessage `protobuf:"bytes,3,rep,name=partition_messages,json=partitionMessages,proto3" json:"partition_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WritePartitionRequest) Reset()         { *m = WritePartitionRequest{} }
func (m *WritePartitionRequest) String() string { return proto.CompactTextString(m) }
func (*WritePartitionRequest) ProtoMessage()    {}
func (*WritePartitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{6}
}

func (m *WritePartitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WritePartitionRequest.Unmarshal(m, b)
}
func (m *WritePartitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WritePartitionRequest.Marshal(b, m, deterministic)
}
func (m *WritePartitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WritePartitionRequest.Merge(m, src)
}
func (m *WritePartitionRequest) XXX_Size() int {
	return xxx_messageInfo_WritePartitionRequest.Size(m)
}
func (m *WritePartitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WritePartitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WritePartitionRequest proto.InternalMessageInfo

func (m *WritePartitionRequest) GetPartitionIndex() int32 {
	if m != nil {
		return m.PartitionIndex
	}
	return 0
}

func (m *WritePartitionRequest) GetIsReplica() bool {
	if m != nil {
		return m.IsReplica
	}
	return false
}

func (m *WritePartitionRequest) GetPartitionMessages() []*QueueMessage {
	if m != nil {
		return m.PartitionMessages
	}
	return nil
}

type GetRemainingMessagesCountResponse struct {
	RemainingMessagesCount int32    `protobuf:"varint,1,opt,name=remaining_messages_count,json=remainingMessagesCount,proto3" json:"remaining_messages_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *GetRemainingMessagesCountResponse) Reset()         { *m = GetRemainingMessagesCountResponse{} }
func (m *GetRemainingMessagesCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetRemainingMessagesCountResponse) ProtoMessage()    {}
func (*GetRemainingMessagesCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28a6b9936d34e1c9, []int{7}
}

func (m *GetRemainingMessagesCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRemainingMessagesCountResponse.Unmarshal(m, b)
}
func (m *GetRemainingMessagesCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRemainingMessagesCountResponse.Marshal(b, m, deterministic)
}
func (m *GetRemainingMessagesCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRemainingMessagesCountResponse.Merge(m, src)
}
func (m *GetRemainingMessagesCountResponse) XXX_Size() int {
	return xxx_messageInfo_GetRemainingMessagesCountResponse.Size(m)
}
func (m *GetRemainingMessagesCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRemainingMessagesCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRemainingMessagesCountResponse proto.InternalMessageInfo

func (m *GetRemainingMessagesCountResponse) GetRemainingMessagesCount() int32 {
	if m != nil {
		return m.RemainingMessagesCount
	}
	return 0
}

func init() {
	proto.RegisterType((*QueueMessage)(nil), "datanode.QueueMessage")
	proto.RegisterType((*PushRequest)(nil), "datanode.PushRequest")
	proto.RegisterType((*PullResponse)(nil), "datanode.PullResponse")
	proto.RegisterType((*AcknowledgePullRequest)(nil), "datanode.AcknowledgePullRequest")
	proto.RegisterType((*ReadPartitionResponse)(nil), "datanode.ReadPartitionResponse")
	proto.RegisterType((*ReadPartitionRequest)(nil), "datanode.ReadPartitionRequest")
	proto.RegisterType((*WritePartitionRequest)(nil), "datanode.WritePartitionRequest")
	proto.RegisterType((*GetRemainingMessagesCountResponse)(nil), "datanode.GetRemainingMessagesCountResponse")
}

func init() {
	proto.RegisterFile("datanode.proto", fileDescriptor_28a6b9936d34e1c9)
}

var fileDescriptor_28a6b9936d34e1c9 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0x89, 0x6d, 0x35, 0x39, 0x8d, 0x69, 0x1d, 0x9a, 0x10, 0x23, 0x6a, 0xcc, 0x8d, 0x05,
	0x71, 0x57, 0x2a, 0x16, 0xc1, 0x1b, 0xad, 0x16, 0x0d, 0x52, 0x49, 0x07, 0x41, 0x10, 0x4c, 0x9c,
	0x64, 0x8f, 0x9b, 0x21, 0x93, 0x9d, 0x75, 0xfe, 0xa8, 0x79, 0x21, 0x1f, 0xc5, 0xe7, 0x92, 0xcd,
	0x66, 0xff, 0xb4, 0xee, 0x36, 0xe4, 0xc2, 0xbb, 0xdd, 0x6f, 0xce, 0xf9, 0xce, 0x6f, 0x0e, 0xdf,
	0x40, 0xc3, 0x63, 0x86, 0x05, 0xd2, 0x43, 0x27, 0x54, 0xd2, 0x48, 0x52, 0x4d, 0xfe, 0x3b, 0x77,
	0x7c, 0x29, 0x7d, 0x81, 0xee, 0x52, 0x1f, 0xdb, 0x6f, 0x2e, 0xce, 0x43, 0xb3, 0x88, 0xcb, 0x7a,
	0xc7, 0x50, 0x3f, 0xb7, 0x68, 0xf1, 0x0c, 0xb5, 0x66, 0x3e, 0x92, 0x7d, 0xd8, 0x9a, 0xe1, 0xa2,
	0x5d, 0xe9, 0x56, 0x0e, 0x6b, 0x34, 0xfa, 0x24, 0x07, 0xb0, 0xf3, 0x83, 0x09, 0x8b, 0xed, 0x6b,
	0xdd, 0xca, 0x61, 0x9d, 0xc6, 0x3f, 0xbd, 0x21, 0xec, 0x0e, 0xac, 0x9e, 0x52, 0xfc, 0x6e, 0x51,
	0x1b, 0xf2, 0x04, 0x6e, 0xcc, 0x63, 0x87, 0x65, 0xeb, 0xee, 0x51, 0xcb, 0x49, 0x79, 0xf2, 0xfe,
	0x34, 0x29, 0x23, 0x77, 0x01, 0xb8, 0x1e, 0x29, 0x0c, 0x05, 0x9f, 0xb0, 0xa5, 0x77, 0x95, 0xd6,
	0xb8, 0xa6, 0xb1, 0xd0, 0x7b, 0x09, 0xf5, 0x81, 0x15, 0x82, 0xa2, 0x0e, 0x65, 0xa0, 0x71, 0xf3,
	0x01, 0xbd, 0x3e, 0xb4, 0x5e, 0x4d, 0x66, 0x81, 0xfc, 0x29, 0xd0, 0xf3, 0x31, 0x36, 0x8b, 0x61,
	0xff, 0xbd, 0xe3, 0x1a, 0x98, 0x21, 0x34, 0x29, 0x32, 0x6f, 0xc0, 0x94, 0xe1, 0x86, 0xcb, 0x20,
	0xa5, 0x3a, 0x05, 0x12, 0x26, 0xe2, 0x68, 0x35, 0x58, 0xb7, 0x2b, 0xdd, 0xad, 0x2b, 0x00, 0x6f,
	0xa5, 0x1d, 0x2b, 0x45, 0xf7, 0x86, 0x70, 0x70, 0xc9, 0x3f, 0x06, 0x7d, 0x08, 0x7b, 0x99, 0x3d,
	0x0f, 0x3c, 0xfc, 0xb5, 0x84, 0xde, 0xa1, 0x8d, 0x54, 0xee, 0x47, 0xea, 0x3a, 0xfe, 0xdf, 0x15,
	0x68, 0x7e, 0x52, 0xdc, 0xe0, 0xff, 0x9a, 0x50, 0xb2, 0x88, 0xad, 0x4d, 0x17, 0xf1, 0x05, 0x1e,
	0xbc, 0x45, 0x43, 0x71, 0xce, 0x78, 0xc0, 0x03, 0x3f, 0xd1, 0x5f, 0x4b, 0x1b, 0x98, 0x74, 0xe9,
	0xcf, 0xa1, 0xad, 0x92, 0x8a, 0x74, 0xd6, 0x68, 0x12, 0xd5, 0xac, 0xe0, 0x5b, 0xaa, 0xd0, 0xe1,
	0xe8, 0xcf, 0x36, 0x54, 0xdf, 0x30, 0xc3, 0x3e, 0x48, 0x0f, 0xc9, 0x33, 0xd8, 0x8e, 0x12, 0x4c,
	0x9a, 0x19, 0x5e, 0x2e, 0xd1, 0x9d, 0x96, 0x13, 0x3f, 0x1b, 0x27, 0x79, 0x36, 0xce, 0x69, 0xf4,
	0x6c, 0xc8, 0x71, 0xd4, 0x26, 0x04, 0x29, 0x39, 0xef, 0xb4, 0xf2, 0x76, 0xb9, 0x00, 0xbf, 0x87,
	0xbd, 0x4b, 0x71, 0x24, 0xdd, 0xac, 0xb4, 0x38, 0xa9, 0xa5, 0x10, 0x03, 0xb8, 0x79, 0x21, 0x30,
	0xe4, 0x5e, 0x66, 0x55, 0x94, 0xa4, 0xce, 0xfd, 0xd2, 0xf3, 0x15, 0x5e, 0x1f, 0x1a, 0x17, 0x13,
	0x42, 0x72, 0x2d, 0x85, 0xd9, 0x29, 0x85, 0x3b, 0x81, 0xfd, 0x81, 0x55, 0x3e, 0xae, 0xb2, 0x11,
	0x2d, 0xfc, 0x8a, 0x6d, 0x15, 0x7b, 0xbc, 0x80, 0x5a, 0x5f, 0xbf, 0x43, 0x26, 0xcc, 0x74, 0xb1,
	0x71, 0xf3, 0x57, 0xb8, 0x5d, 0x9a, 0xa2, 0x52, 0xb3, 0x47, 0xd9, 0x75, 0xd7, 0x46, 0xf0, 0xc4,
	0xfd, 0xfc, 0xd8, 0xe7, 0x66, 0x6a, 0xc7, 0xce, 0x44, 0xce, 0xdd, 0xd9, 0x42, 0x2b, 0x74, 0x3f,
	0x5a, 0x65, 0x04, 0x9e, 0x9d, 0xbb, 0x02, 0x99, 0x87, 0xca, 0x0d, 0x67, 0xbe, 0x9b, 0x58, 0x8e,
	0xaf, 0x2f, 0xa7, 0x3d, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x91, 0x08, 0x82, 0xa6, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeClient interface {
	// Basic Queue Operation
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Pull(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PullResponse, error)
	AcknowledgePull(ctx context.Context, in *AcknowledgePullRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Data syncing Operation
	ReadPartition(ctx context.Context, in *ReadPartitionRequest, opts ...grpc.CallOption) (*ReadPartitionResponse, error)
	WritePartition(ctx context.Context, in *WritePartitionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PurgeReplicaData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Cluster consensus
	IsHealthy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetRemainingMessagesCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetRemainingMessagesCountResponse, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) Pull(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PullResponse, error) {
	out := new(PullResponse)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) AcknowledgePull(ctx context.Context, in *AcknowledgePullRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/AcknowledgePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ReadPartition(ctx context.Context, in *ReadPartitionRequest, opts ...grpc.CallOption) (*ReadPartitionResponse, error) {
	out := new(ReadPartitionResponse)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/ReadPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) WritePartition(ctx context.Context, in *WritePartitionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/WritePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) PurgeReplicaData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/PurgeReplicaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) IsHealthy(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/IsHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) GetRemainingMessagesCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetRemainingMessagesCountResponse, error) {
	out := new(GetRemainingMessagesCountResponse)
	err := c.cc.Invoke(ctx, "/datanode.DataNode/GetRemainingMessagesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
type DataNodeServer interface {
	// Basic Queue Operation
	Push(context.Context, *PushRequest) (*empty.Empty, error)
	Pull(context.Context, *empty.Empty) (*PullResponse, error)
	AcknowledgePull(context.Context, *AcknowledgePullRequest) (*empty.Empty, error)
	// Data syncing Operation
	ReadPartition(context.Context, *ReadPartitionRequest) (*ReadPartitionResponse, error)
	WritePartition(context.Context, *WritePartitionRequest) (*empty.Empty, error)
	PurgeReplicaData(context.Context, *empty.Empty) (*empty.Empty, error)
	// Cluster consensus
	IsHealthy(context.Context, *empty.Empty) (*empty.Empty, error)
	GetRemainingMessagesCount(context.Context, *empty.Empty) (*GetRemainingMessagesCountResponse, error)
}

// UnimplementedDataNodeServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (*UnimplementedDataNodeServer) Push(ctx context.Context, req *PushRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedDataNodeServer) Pull(ctx context.Context, req *empty.Empty) (*PullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedDataNodeServer) AcknowledgePull(ctx context.Context, req *AcknowledgePullRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgePull not implemented")
}
func (*UnimplementedDataNodeServer) ReadPartition(ctx context.Context, req *ReadPartitionRequest) (*ReadPartitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPartition not implemented")
}
func (*UnimplementedDataNodeServer) WritePartition(ctx context.Context, req *WritePartitionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePartition not implemented")
}
func (*UnimplementedDataNodeServer) PurgeReplicaData(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeReplicaData not implemented")
}
func (*UnimplementedDataNodeServer) IsHealthy(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHealthy not implemented")
}
func (*UnimplementedDataNodeServer) GetRemainingMessagesCount(ctx context.Context, req *empty.Empty) (*GetRemainingMessagesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainingMessagesCount not implemented")
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).Pull(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_AcknowledgePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).AcknowledgePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/AcknowledgePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).AcknowledgePull(ctx, req.(*AcknowledgePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ReadPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ReadPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/ReadPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ReadPartition(ctx, req.(*ReadPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_WritePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WritePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).WritePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/WritePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).WritePartition(ctx, req.(*WritePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_PurgeReplicaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).PurgeReplicaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/PurgeReplicaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).PurgeReplicaData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).IsHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/IsHealthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).IsHealthy(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_GetRemainingMessagesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GetRemainingMessagesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.DataNode/GetRemainingMessagesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GetRemainingMessagesCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _DataNode_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _DataNode_Pull_Handler,
		},
		{
			MethodName: "AcknowledgePull",
			Handler:    _DataNode_AcknowledgePull_Handler,
		},
		{
			MethodName: "ReadPartition",
			Handler:    _DataNode_ReadPartition_Handler,
		},
		{
			MethodName: "WritePartition",
			Handler:    _DataNode_WritePartition_Handler,
		},
		{
			MethodName: "PurgeReplicaData",
			Handler:    _DataNode_PurgeReplicaData_Handler,
		},
		{
			MethodName: "IsHealthy",
			Handler:    _DataNode_IsHealthy_Handler,
		},
		{
			MethodName: "GetRemainingMessagesCount",
			Handler:    _DataNode_GetRemainingMessagesCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datanode.proto",
}
